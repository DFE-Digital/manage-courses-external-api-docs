---
title: API Reference

language_tabs: # must be one of https://git.io/vQNgJ
  - shell

toc_footers:
  - <a href='https://github.com/lord/slate'>Documentation Powered by Slate</a>

search: true
---

# Introduction

# Authorisation

The server expects an API key to be included in a header  for all API requests:

`Authorization: Bearer your_api_key`

<aside class="notice">
You must replace <code>your_api_key</code> with your issued API key.
</aside>


> To authorise, use this code:

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: Bearer your_api_key"
```

# Pagination

All endpoints return paginated results, meaning if there are more results than the page size, multiple requests will be necessary to retrieve all the results.

> Example page URLs:

```
<%= config[:base_api_url] %>/courses
<%= config[:base_api_url] %>/courses?page=1
<%= config[:base_api_url] %>/courses?page=2
<%= config[:base_api_url] %>/courses?page=3
```

The API responses contain meta-information in the `Link`, `Per-Page` and `Total` headers:

Header | Description | Example
------ | ----------- | -------
Link   | Links to the next and last pages | `Link: <<%= config[:base_api_url] %>/courses?page=169>; rel="last", <<%= config[:base_api_url] %>/courses?page=2>; rel="next"`
Per-Page | The number of results in the page | `Per-Page: 100`
Total | The total number of results | `Total: 16888`

# Errors

The API uses the following error codes:

Error Code | Meaning
---------- | -------
400 | Bad Request -- Your request is invalid.
401 | Unauthorized -- Your API key is wrong.
404 | Not Found -- The specified resource could not be found.
500 | Internal Server Error -- We had a problem with our server. Try again later.
503 | Service Unavailable -- We're temporarily offline for maintenance. Please try again later.

# Endpoints

## Courses

### Entity documentation

Parameter | Data type | Possible values | Description
--------- | --------- | --------------- | -----------
course_code | Text | 4-character strings | 4-character course code
start_month | ISO 8601 date/time string | | The month and year when the course starts
start_month_string | Text | January, February, etc | The month when the course starts as a string
name | Text | | Course title
copy_form_required | Text | 'Y' or 'N' |
profpost_flag | Text | "", "PF", "PG", "BO" | Maximum of 2-characters
program_type | Text | "SC", "SS", "TA", "SD", "HE" | Maximum of 2-characters
modular | Text | "", "M" | Maximum of 1-character
english | Integer | 1, 2, 3, 9 |
maths | Integer | 1, 2, 3, 9 |
science | Integer | 1, 2, 3, 9, null |
recruitment_cycle | Text || 4-character year
campus_statuses | An array of campus statuses | | See the campus status entity documentation below
subjects | An array of subjects | | See the subject entity documentation below
provider | Provider | A provider entity | See the provider entity documentation below
accrediting_provider | Provider | null or a provider entity | See the provider entity documentation below
age_range | Text | "P", "S", "M", "O" | Age of students targeted by this course.

### Get all courses

```shell
curl "<%= config[:base_api_url] %>/courses"
  -H "Authorization: Bearer your_api_key"
```

> The above command returns JSON structured like this:

```json
[
  {
    "course_code": "36B3",
    "start_month": "2019-09-01T00:00:00.000Z",
    "start_month_string": "September",
    "name": "Mathematics",
    "study_mode": "F",
    "copy_form_required": "Y",
    "profpost_flag": "PG",
    "program_type": "SD",
    "modular": "M",
    "english": 1,
    "maths": 3,
    "science": null,
    "qualification": 1,
    "recruitment_cycle": "2019",
    "age_range": "S",
    "campus_statuses": [
      {
        "campus_code": "-",
        "name": "Main Site",
        "vac_status": "F",
        "publish": "Y",
        "status": "R",
        "course_open_date": "2018-10-09 00:00:00",
        "recruitment_cycle": "2019"
      }
    ],
    "subjects": [
      {
        "subject_name": "Secondary",
        "subject_code": "05"
      },
      {
        "subject_name": "Mathematics",
        "subject_code": "G1"
      }
    ],
    "provider": {
      "institution_code": "2G9",
      "institution_name": "Outwood Institute of Education North",
      "institution_type": "Y",
      "accrediting_provider": "Y",
      "address1": "Sydney Russell School",
      "address2": "Parsloes Avenue",
      "address3": "Dagenham",
      "address4": "Essex",
      "postcode": "RM9 5QT"
    },
    "accrediting_provider": {
      "institution_code": "D86",
      "institution_name": "Durham University",
      "institution_type": "Y",
      "accrediting_provider": "Y"
    }
  },
  {
    ...
  }
]
```

This endpoint retrieves all courses.

#### HTTP Request

`GET <%= config[:base_api_url] %>/courses`

## Campuses

### Entity documentation

Parameter | Data type | Possible values | Description
--------- | --------- | --------------- | -----------
campus_code | Text | A-Z, 0-9, "-", "" | 1-character campus codes
name | Text | |
region_code | Text | 01 to 11 | 2-character string
recruitment_cycle | Text || 4-character year

## Campus statuses

### Entity documentation

Parameter | Data type | Possible values | Description
--------- | --------- | --------------- | -----------
campus_code | Text | A-Z, 0-9, "-", "" | 1-character campus codes
name | Text | |
vac_status | Text | |
publish | Text | |
status | Text | |
course_open_date | ISO 8601 date/time string | |
recruitment_cycle | Text || 4-character year

## Subjects

### Entity documentation

Parameter | Data type | Possible values | Description
--------- | --------- | --------------- | -----------
subject_code | Text | 2-character strings | 2-character subject codes
subject_name | Text | |

### Get all providers

```shell
curl "<%= config[:base_api_url] %>/subjects"
  -H "Authorization: Bearer your_api_key"
```

> The above command returns JSON structured like this:

```json
[
  {
    "subject_name": "Chinese",
    "subject_code": "T1"
  },
  {
    ...
  }
]
```

This endpoint retrieves all subjects.

## Providers

### Entity documentation

Parameter | Data type | Possible values | Description
--------- | --------- | --------------- | -----------
institution_code | Text | 3-character strings | 3-character UCAS institution code
institution_name | Text | | The institution's full-length marketing name
institution_type | Text | "Y", "B", "0", "O", null | The type of institution (whether it's a university, lead school/teaching school alliance or a SCITT)
accrediting_provider | Text | "Y" or "N" | Whether the provider can accredit courses or not
campuses | An array of campus || See the campus entity documentation above
address1 | Text || Address line 1
address2 | Text || Address line 2
address3 | Text || Town/City
address4 | Text || County
postcode | Text || Postcode
region_code | Text | 01 to 11 | 2-character string

### Get all providers

```shell
curl "<%= config[:base_api_url] %>/providers"
  -H "Authorization: Bearer your_api_key"
```

> The above command returns JSON structured like this:

```json
[
  {
    "institution_code": "P60",
    "institution_name": "University of Plymouth",
    "institution_type": "Y",
    "accrediting_provider": "Y",
    "address1": "Sydney Russell School",
    "address2": "Parsloes Avenue",
    "address3": "Dagenham",
    "address4": "Essex",
    "postcode": "RM9 5QT",
    "region_code": "01",
    "campuses": [
      {
        "campus_code": "",
        "name": "Main Site",
        "recruitment_cycle": "2019",
        "region_code": "01"
      }
    ]
  },
  {
    ...
  }
]
```

This endpoint retrieves all institutions.
